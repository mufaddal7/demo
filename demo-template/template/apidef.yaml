---
openapi: 3.0.1
info:
  title: JPK Client Cockpit - Backend
  description: 'OpenAPI specification file for JPK Trader - Client cockpit - Backend

    '
  termsOfService: https://drkv.com
  contact:
    name: 'Dr. Michael Kirchhof '
    url: https://drkv.com
    email: m.kirchhof@drkv.com
  license:
    name: Internal only, proprietary
    url: https://drkv.com
  version: '1.0'
servers:
- url: https://api.dev.drkv.xyz/{basePath}
  variables:
    basePath:
      default: dev
paths:
  "/jpkclients/sputniks/fetch-data":
    get:
      parameters:
      - name: user_id
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FetchData200Response"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:SputnikProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestParameters:
          integration.request.header.user_id: method.request.header.user_id
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
  "/events":
    get:
      operationId: list-events
      parameters:
      - name: event_id
        in: header
        description: uniquely identifies an event
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Event"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:EventsProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestParameters:
          integration.request.header.event_id: method.request.header.event_id
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
    post:
      operationId: create-event
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Event"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:EventsProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/associate":
    get:
      operationId: get-associate
      parameters:
      - name: jpk_client_id
        in: header
        schema:
          type: string
      - name: user_id
        in: header
        schema:
          type: string
      - name: associate_id
        in: header
        schema:
          type: string
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserJPKClientAssociation"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:AssociateProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestParameters:
          integration.request.header.user_id: method.request.header.user_id
          integration.request.header.jpk_client_id: method.request.header.jpk_client_id
          integration.request.header.associate_id: method.request.header.associate_id
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
    post:
      operationId: create-associate
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserJPKClientAssociation"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:AssociateProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
    delete:
      operationId: delete-associate
      parameters:
      - name: associate_id
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 200 response
          content: {}
        '500':
          description: 500 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:AssociateProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestParameters:
          integration.request.header.associate_id: method.request.header.associate_id
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/user/set-attributes":
    put:
      operationId: update-attributes
      parameters:
      - name: user_id
        in: header
        schema:
          type: string
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body, query string parameters,
        and headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/jpkclients/sputniks":
    get:
      operationId: get-sputnik
      parameters:
      - name: sputnik_account_id
        in: header
        schema:
          type: string
          format: uuid
      - name: jpk_client_id
        in: header
        description: Uniquely identifies a jpk client
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SputnikAccount"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:SputnikProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestParameters:
          integration.request.header.sputnik_account_id: method.request.header.sputnik_account_id
          integration.request.header.jpk_client_id: method.request.header.jpk_client_id
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
    put:
      operationId: put-sputnik
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SputnikAccount"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:SputnikProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
    post:
      operationId: create-sputnik
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SputnikAccount"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:SputnikProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
    delete:
      operationId: delete-sputnik
      parameters:
      - name: sputnik_account_id
        in: header
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:SputnikProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestParameters:
          integration.request.header.sputnik_account_id: method.request.header.sputnik_account_id
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/JPKAppContentManagement":
    x-amazon-apigateway-any-method:
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:ContentManagementProd/invocations
        responses:
          ".*":
            statusCode: '200'
        passthroughBehavior: when_no_match
  "/user/forgot-password":
    post:
      operationId: forgot-password
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ForgotPassword"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/jpkclients/sputniks/aws-regions":
    get:
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body, query string parameters,
        and headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:SputnikProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/jpkclients":
    get:
      operationId: get-jpkclient
      parameters:
      - name: jpk_client_id
        in: header
        description: Uniquely identifies a jpk client
        schema:
          type: string
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/JPKClient"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:JPKClientsProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
    put:
      operationId: put-jpkclient
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/JPKClient"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:JPKClientsProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
    post:
      operationId: create-jpkclient
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/JPKClient"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:JPKClientsProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/user/get-attributes":
    get:
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |-
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/device/generic-data":
    get:
      responses:
        '200':
          content: {}
          description: 200 response
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        responses:
          default:
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
            statusCode: '200'
        type: aws
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:JPKGenericDataProd/invocations
  "/user/authorize-signin":
    post:
      operationId: authorize-signin
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AuthorizeSignin"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/user/profile-photo/upload-url":
    get:
      parameters: []
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body, query string parameters,
        and headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:UserDetailsProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/device/register-token":
    put:
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:DeviceDetailsProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/webHook/generate-otp":
    get:
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body, query string parameters,
        and headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:TelegramUserAssociationProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/user/signout":
    post:
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/user/confirm-forgot-password":
    post:
      operationId: confirm-forgot-password
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ConfirmForgotPassword"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/users":
    get:
      operationId: list-all-users
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArrayOfUser"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/jpkclients/sputniks/deployment-status":
    post:
      operationId: deployment-status
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/POSTSputnikAccountID"
        required: true
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeploymentStatus200Response"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:SputnikProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\":
            $input.json('$'),\r\n  \"path\": \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  },\r\n  \"params\": {\r\n    #foreach($type in $input.params().keySet())\r\n
            \   \"$type\": {\r\n      #set($params = $input.params().get($type))\r\n
            \     #foreach($paramName in $params.keySet())\r\n      \"$paramName\":
            \"$util.escapeJavaScript($params.get($paramName))\"\r\n      #if($foreach.hasNext),#end\r\n
            \     #end\r\n    }\r\n    #if($foreach.hasNext),#end\r\n    #end\r\n
            \ }\r\n}\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/user/signup":
    post:
      operationId: user-signup
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserSignup"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/device/content":
    get:
      parameters:
      - name: label_type
        in: header
        schema:
          type: string
      - name: language_code
        in: header
        schema:
          type: string
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:ContentManagementProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestParameters:
          integration.request.header.label_type: method.request.header.label_type
          integration.request.header.language_code: method.request.header.language_code
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
    post:
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ContentManagement"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:ContentManagementProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
    delete:
      parameters:
      - name: label_type
        in: header
        schema:
          type: string
      - name: language_code
        in: header
        schema:
          type: string
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:ContentManagementProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestParameters:
          integration.request.header.label_type: method.request.header.label_type
          integration.request.header.language_code: method.request.header.language_code
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/jpkclients/sputniks/app-versions":
    get:
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AppVersion200Response"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:SputnikProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: aws
  "/jpkclients/sputniks/trader-versions":
    get:
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AppVersion200Response"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:SputnikProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: aws
  "/jpkclients/sputniks/deploy":
    post:
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/POSTSputnikAccountID"
        required: true
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/sputnikDeploymentResponse"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:SputnikProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: aws
  "/save-token":
    put:
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:DeviceDetailsProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/user/resend-confirmation-code":
    post:
      operationId: resend-confirmation-code
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ResendCode"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/user/confirm-signup":
    post:
      operationId: confirm-signup
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ConfirmSignup"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/webHook":
    post:
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:TelegramUserAssociationProd/invocations
        responses:
          default:
            statusCode: '200'
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
  "/jpkclients/sputniks/cf-template/{aws_account_id}":
    get:
      operationId: get_aws_account_id
      parameters:
      - name: aws_account_id
        in: path
        required: true
        schema:
          type: string
          pattern: "^[0-9]{12}$"
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CloudFormationTemplate200Response"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:SputnikProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\":
            $input.json('$'),\r\n  \"path\": \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  },\r\n  \"params\": {\r\n    #foreach($type in $input.params().keySet())\r\n
            \   \"$type\": {\r\n      #set($params = $input.params().get($type))\r\n
            \     #foreach($paramName in $params.keySet())\r\n      \"$paramName\":
            \"$util.escapeJavaScript($params.get($paramName))\"\r\n      #if($foreach.hasNext),#end\r\n
            \     #end\r\n    }\r\n    #if($foreach.hasNext),#end\r\n    #end\r\n
            \ }\r\n}\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/kpis":
    get:
      operationId: get-kpis
      parameters:
      - name: sputnik_account_id
        in: header
        schema:
          type: string
          format: uuid
      - name: jpk_client_id
        in: header
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PerformanceData"
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:KPIsProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestParameters:
          integration.request.header.sputnik_account_id: method.request.header.sputnik_account_id
          integration.request.header.jpk_client_id: method.request.header.jpk_client_id
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
    post:
      operationId: create-kpi
      requestBody:
        description: 'Status: Early Draft'
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PerformanceData"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:KPIsProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
  "/user/signin":
    post:
      operationId: signin
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Signin"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/user":
    get:
      operationId: get-user
      parameters:
      - name: user_id
        in: header
        description: Uniquely identifies a user
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
      x-amazon-apigateway-request-validator: Validate query string parameters and
        headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestParameters:
          integration.request.header.user_id: method.request.header.user_id
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
    put:
      requestBody:
        description: Can be client users or backoffice users.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
    post:
      requestBody:
        description: Can be client users or backoffice users.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-request-validator: Validate body
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/user/reset-password":
    post:
      operationId: reset-password
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ResetPassword"
        required: true
      responses:
        '200':
          description: 200 response
          content: {}
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')"
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
  "/user/refresh-token":
    post:
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RefreshTokenRequestModel"
        required: true
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RefreshToken200Response"
        '500':
          description: 500 response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RefreshToken500Response"
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:LoginSystemProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: |-
                #set($inputRoot = $input.path('$'))

                #if($inputRoot.statusCode != 200)

                    #set($context.responseOverride.status = $inputRoot.statusCode)

                #end

                $input.json('$')
          "(?i)error|exception|fail|fatal":
            statusCode: '500'
        requestTemplates:
          application/json: |+
            {
              "method": "$context.httpMethod",
              "body" : $input.json('$'),
              "path" : "$context.resourcePath",
              "headers": {
                #foreach($param in $input.params().header.keySet())
                "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                #if($foreach.hasNext),#end
                #end
              }
            }

        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
  "/webHook/disassociate":
    get:
      responses:
        '200':
          description: 200 response
          content: {}
      security:
      - cognito-authorizer: []
      x-amazon-apigateway-request-validator: Validate body, query string parameters,
        and headers
      x-amazon-apigateway-integration:
        type: aws
        httpMethod: POST
        uri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:TelegramUserAssociationProd/invocations
        responses:
          default:
            statusCode: '200'
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n#if($inputRoot.statusCode
                != 200)\r\n    #set($context.responseOverride.status = $inputRoot.statusCode)\r\n#end\r\n$input.json('$')\r\n"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\"
            : $input.json('$'),\r\n  \"path\" : \"$context.resourcePath\",\r\n  \"headers\":
            {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\":
            \"$util.escapeJavaScript($input.params().header.get($param))\"\r\n    #if($foreach.hasNext),#end\r\n
            \   #end\r\n  }\r\n}\r\n\r\n"
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
components:
  schemas:
    AuthorizeSignin:
      type: object
      properties:
        username:
          type: string
          format: email
        sms_mfa:
          maxLength: 6
          minLength: 6
          pattern: "[0-9]"
          type: string
        challenge_name:
          type: string
          default: SMS_MFA
        session:
          type: string
    ResetPassword:
      type: object
      properties:
        old_password:
          type: string
          format: password
        new_password:
          type: string
          format: password
        access_token:
          type: string
    JPKClient:
      title: JPKClient
      required:
      - friendly_name
      - licenses
      type: object
      properties:
        jpk_client_id:
          type: string
          format: uuid
        licenses:
          maxItems: 99
          minItems: 1
          uniqueItems: true
          type: array
          items:
            maxProperties: 99
            minProperties: 1
            required:
            - account_limit
            - name
            type: object
            properties:
              name:
                type: string
                enum:
                - JPK3.x
                - JPK4.x
              account_limit:
                multipleOf: 1
                maximum: 999
                minimum: 1
                type: integer
                format: int32
                default: 1
            additionalProperties: false
        friendly_name:
          pattern: "^[a-z0-9]+$"
          type: string
        status:
          type: string
          enum:
          - ACTIVE
          - DEACTIVATED
          - BLACKLISTED
    POSTSputnikAccountID:
      title: Sputnik Account ID
      type: object
      properties:
        sputnik_account_id:
          type: string
          format: uuid
    User:
      title: User
      required:
      - email
      - id
      - name
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/UserID"
        name:
          type: string
        email:
          type: string
          format: email
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        displayName:
          type: string
        client_prefix:
          type: string
        phone:
          maxLength: 14
          minLength: 8
          pattern: "[0-9]+"
          type: string
          description: Phone number with country code, should be mobile number.
        isUserTypeBackoffice:
          type: string
          enum:
          - user
          - backoffice-edit
          - backoffice-readonly
          - backoffice-add
          - ''
        isActive:
          type: string
          enum:
          - DEACTIVE
          - ACTIVE
          - BLACKLISTED
        isFirstLogin:
          type: string
          enum:
          - logged-in
          - not-logged-in
      description: Can be client users or backoffice users.
    AppVersion200Response:
      type: object
      properties:
        latest_version:
          type: string
          description: The latest version of the application
        version_list:
          type: array
          items:
            type: object
            properties:
              number:
                type: string
                description: The version number
              description:
                type: string
                description: Description of the version
              status:
                type: string
                enum:
                - Active
                - Deprecated
                description: Status of the version
            required:
            - number
            - description
            - status
          description: List of versions with their descriptions and status
      required:
      - latest_version
      - version_list
    CloudFormationTemplate200Response:
      type: object
      properties:
        s3url:
          type: string
          format: uri
          description: The S3 URL pointing to a resource in an S3 bucket
    DeploymentStatus200Response:
      type: object
      description: Contains data related to the deployment status.
      properties:
        status:
          type: string
          enum:
          - UNDEPLOYED
          - IN_PROGRESS
          - DEPLOYED
          - FAILED
          - UNKNOWN
    FetchData200Response:
      title: FetchData
      description: Fetching all the jpk clients and sputniks from the database
      type: array
      items:
        type: object
        properties:
          jpk_client_id:
            "$ref": "#/components/schemas/JPKClientID"
          licenses:
            maxItems: 99
            minItems: 1
            uniqueItems: true
            type: array
            items:
              maxProperties: 99
              minProperties: 1
              required:
              - account_limit
              - name
              type: object
              properties:
                name:
                  type: string
                  enum:
                  - JPK3.x
                  - JPK4.x
                account_limit:
                  multipleOf: 1
                  maximum: 999
                  minimum: 1
                  type: integer
                  format: int32
                  default: 1
              additionalProperties: false
          friendly_name:
            pattern: "^[a-z0-9]+$"
            type: string
          status:
            type: string
            enum:
            - ACTIVE
            - DEACTIVATED
            - BLACKLISTED
          sputniks:
            type: array
            items:
              "$ref": "#/components/schemas/SputnikAccount"
    PerformanceData:
      title: PerformanceData
      required:
      - jpk_client_id
      - sputnik_account_id
      type: object
      properties:
        kpi_id:
          type: string
          format: uuid
        sputnik_account_id:
          "$ref": "#/components/schemas/SputnikAccountID"
        jpk_client_id:
          "$ref": "#/components/schemas/JPKClientID"
        kpis:
          type: object
          properties:
            ts:
              type: string
              format: date-time
            pl:
              type: number
              format: double
            number_of_orders_created:
              minimum: 0
              type: integer
              format: int32
            number_of_open_orders:
              minimum: 0
              type: integer
              format: int32
            number_of_positions_created:
              minimum: 0
              type: integer
              format: int32
            number_of_positions_open:
              type: integer
              format: int32
            number_of_created_transactions:
              minimum: 0
              type: integer
              format: int32
            number_of_transactions:
              minimum: 0
              type: integer
              format: int32
          additionalProperties: false
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
      description: 'Status: Early Draft'
    RefreshToken200Response:
      type: object
      properties:
        new_access_token:
          type: string
          description: The new access token obtained after successful refresh
    ConfirmSignup:
      type: object
      properties:
        username:
          type: string
          format: email
        confirmation_code:
          maxLength: 6
          minLength: 6
          pattern: "[0-9]"
          type: string
          format: regex
    ArrayOfUser:
      type: array
      items:
        "$ref": "#/components/schemas/User"
    ForgotPassword:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          format: email
    RefreshTokenRequestModel:
      type: object
      properties:
        refresh_token:
          type: string
          description: The refresh token of the user
        username:
          type: string
          description: The username associated with the refresh token
    SputnikAccount:
      title: Sputnik Account
      type: object
      properties:
        sputnik_account_id:
          "$ref": "#/components/schemas/SputnikAccountID"
        name:
          type: string
        jpk_client_id:
          "$ref": "#/components/schemas/JPKClientID"
        friendly_name:
          pattern: "^[a-z0-9]+$"
          type: string
        aws:
          maxProperties: 3
          minProperties: 3
          type: object
          properties:
            account_id:
              type: string
              pattern: "^[0-9]{12}$"
            region:
              type: string
              enum:
              - eu-central-1
            operating_system:
              type: string
          additionalProperties: false
        app_version:
          type: string
        base_url:
          type: string
          format: uri
        status:
          type: string
          enum:
          - ACTIVE
          - DEACTIVATED
          - BLACKLISTED
    sputnikDeploymentResponse:
      title: sputnikDeploymentResponse
      type: object
      properties:
        sputnikId:
          type: string
        status:
          type: string
          enum:
          - IN_PROGRESS
          - UNDEPLOYED
          - FAILED
          - UNKNOWN
          - DEPLOYED
    JPKClientID:
      title: JPKClientID
      type: string
      format: uuid
    ResendCode:
      type: object
      properties:
        username:
          type: string
          format: email
    UserJPKClientAssociation:
      title: UserJPKClientAssociation
      type: object
      properties:
        user_id:
          "$ref": "#/components/schemas/UserID"
        jpk_client_id:
          "$ref": "#/components/schemas/JPKClientID"
    RefreshToken500Response:
      type: object
      properties:
        error:
          type: string
          description: Error message in case of token refresh failure
    SputnikAccountID:
      title: Sputnik Account ID
      type: string
      format: uuid
    ConfirmForgotPassword:
      required:
      - code
      - password
      - username
      type: object
      properties:
        username:
          type: string
          format: email
        password:
          type: string
          format: password
        code:
          maxLength: 6
          minLength: 6
          pattern: "[0-9]"
          type: string
          format: regex
    UserSignup:
      required:
      - email
      - name
      - password
      - phone_number
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        name:
          type: string
        phone_number:
          pattern: ^"+"d{1,15}$
          type: string
          format: regex
    UserID:
      title: UserID
      type: string
      format: uuid
    ContentManagement:
      title: DeviceManagement
      required:
      - content
      - label_type
      - language_code
      type: object
      properties:
        language_code:
          type: string
          enum:
          - en
          - es
          - fr
          - de
          - it
          - pt
          - nl
          - ru
          - zh
          - ja
          - ko
          - ar
          - hi
          - bn
          - ur
          - tr
          - th
          - id
          - vi
          - el
        content:
          type: string
        label_type:
          type: string
        additional_attributes:
          type: object
          properties:
            category:
              type: string
    Signin:
      type: object
      properties:
        username:
          type: string
          format: email
        password:
          type: string
          format: password
    Event:
      title: Event
      type: object
      properties:
        event_id:
          type: string
          format: uuid
        ts:
          type: string
          format: date-time
        relates_to:
          type: object
          properties:
            user_id:
              "$ref": "#/components/schemas/UserID"
            jpk_client_id:
              "$ref": "#/components/schemas/JPKClientID"
            sputnik_account_id:
              "$ref": "#/components/schemas/SputnikAccountID"
        severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
        event_type:
          type: string
          enum:
          - TradeEvent
          - UserEvent
          - BrokerEvent
          - AwsEvent
          - HostingEvent
          - OTHER
          - NotificationEvent
        subject:
          type: string
        description:
          type: string
        action_required:
          type: boolean
        action_description:
          type: string
  securitySchemes:
    cognito-authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: token
        authorizerUri: arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:339712811766:function:AuthorizerProd/invocations
        authorizerResultTtlInSeconds: 0
x-amazon-apigateway-documentation:
  version: 1.0.5
  createdDate: '2024-04-04T11:35:39Z'
  documentationParts:
  - location:
      type: API
    properties:
      info:
        description: 'OpenAPI specification file for JPK Trader - Client cockpit -
          Backend

          '
        termsOfService: https://drkv.com
        contact:
          name: 'Dr. Michael Kirchhof '
          url: https://drkv.com
          email: m.kirchhof@drkv.com
        license:
          name: Internal only, proprietary
          url: https://drkv.com
  - location:
      type: MODEL
      name: Event
    properties:
      title: Event
  - location:
      type: MODEL
      name: JPKClient
    properties:
      title: JPKClient
  - location:
      type: MODEL
      name: JPKClientID
    properties:
      title: JPKClientID
  - location:
      type: MODEL
      name: PerformanceData
    properties:
      title: PerformanceData
      description: 'Status: Early Draft'
  - location:
      type: MODEL
      name: RefreshToken200Response.new_access_token
    properties:
      description: The new access token obtained after successful refresh
  - location:
      type: MODEL
      name: RefreshToken500Response.error
    properties:
      description: Error message in case of token refresh failure
  - location:
      type: MODEL
      name: RefreshTokenRequestModel.refresh_token
    properties:
      description: The refresh token of the user
  - location:
      type: MODEL
      name: RefreshTokenRequestModel.username
    properties:
      description: The username associated with the refresh token
  - location:
      type: MODEL
      name: SputnikAccount.aws.accessKey
    properties:
      description: Can only be set, but not retrieved via API for security reasons.
  - location:
      type: MODEL
      name: SputnikAccount.aws.access_key
    properties:
      description: Can only be set, but not retrieved via API for security reasons.
  - location:
      type: MODEL
      name: SputnikAccount.aws.secretKey
    properties:
      description: Can only be set, but not retrieved via API for security reasons.
  - location:
      type: MODEL
      name: SputnikAccount.aws.secret_key
    properties:
      description: Can only be set, but not retrieved via API for security reasons.
  - location:
      type: MODEL
      name: SputnikAccount
    properties:
      title: Sputnik Account
  - location:
      type: MODEL
      name: SputnikAccountID
    properties:
      title: JPKAccountID
  - location:
      type: MODEL
      name: User.emailVerified
    properties:
      description: Set to true if the user's email has been verified.
  - location:
      type: MODEL
      name: User.phone
    properties:
      description: Phone number with country code, should be mobile number.
  - location:
      type: MODEL
      name: User
    properties:
      title: User
      description: Can be client users or backoffice users.
  - location:
      type: MODEL
      name: UserID
    properties:
      title: UserID
  - location:
      type: MODEL
      name: UserJPKClientAssociation
    properties:
      title: UserJPKClientAssociation
  - location:
      type: REQUEST_BODY
      path: "/kpis"
      method: POST
    properties:
      description: 'Status: Early Draft'
  - location:
      type: REQUEST_BODY
      path: "/user"
      method: POST
    properties:
      description: Can be client users or backoffice users.
  - location:
      type: REQUEST_BODY
      path: "/user"
      method: PUT
    properties:
      description: Can be client users or backoffice users.
  - location:
      type: REQUEST_HEADER
      path: "/associate"
      method: DELETE
      name: associationid
    properties:
      description: An Association Id that links a particular User to a JPK Client
  - location:
      type: REQUEST_HEADER
      path: "/associate"
      method: GET
      name: associationid
    properties:
      description: An Association Id that links a particular User to a JPK Client
  - location:
      type: REQUEST_HEADER
      path: "/events"
      method: GET
      name: event_id
    properties:
      description: uniquely identifies an event
  - location:
      type: REQUEST_HEADER
      path: "/events"
      method: GET
      name: eventid
    properties:
      description: uniquely identifies an event
  - location:
      type: REQUEST_HEADER
      path: "/jpkclients"
      method: GET
      name: jpkClientId
    properties:
      description: Uniquely identifies a jpk client
  - location:
      type: REQUEST_HEADER
      path: "/jpkclients"
      method: GET
      name: jpk_client_id
    properties:
      description: Uniquely identifies a jpk client
  - location:
      type: REQUEST_HEADER
      path: "/user"
      method: GET
      name: user_id
    properties:
      description: Uniquely identifies a user
  - location:
      type: REQUEST_HEADER
      path: "/user"
      method: GET
      name: userid
    properties:
      description: Uniquely identifies a user
  - location:
      type: RESPONSE
      path: "/JPKAppContentManagement"
      method: "*"
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/associate"
      method: DELETE
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/associate"
      method: DELETE
      statusCode: '500'
    properties:
      description: 500 response
  - location:
      type: RESPONSE
      path: "/associate"
      method: GET
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/associate"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/device/content"
      method: DELETE
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/device/content"
      method: GET
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/device/content"
      method: PATCH
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/device/content"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/device/register-token"
      method: PUT
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/events"
      method: GET
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/events"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/jpkclients/sputniks"
      method: DELETE
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/jpkclients/sputniks"
      method: GET
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/jpkclients/sputniks"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/jpkclients/sputniks"
      method: PUT
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/jpkclients"
      method: GET
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/jpkclients"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/jpkclients"
      method: PUT
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/kpis"
      method: GET
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/kpis"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/save-token"
      method: PUT
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/user/authorize-signin"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/user/confirm-forgot-password"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/user/confirm-signup"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/user/forgot-password"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/user/refresh-token"
      method: POST
      statusCode: '500'
    properties:
      description: 500 response
  - location:
      type: RESPONSE
      path: "/user/resend-confirmation-code"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/user/reset-password"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/user/signin"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/user/signup"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/user"
      method: GET
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/user"
      method: POST
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/user"
      method: PUT
      statusCode: '200'
    properties:
      description: 200 response
  - location:
      type: RESPONSE
      path: "/users"
      method: GET
      statusCode: '200'
    properties:
      description: 200 response
x-amazon-apigateway-gateway-responses:
  WAF_FILTERED:
    statusCode: 403
    responseTemplates:
      application/json: '{"message":$context.error.messageString,"statusCode":403}'
  MISSING_AUTHENTICATION_TOKEN:
    statusCode: 403
    responseTemplates:
      application/json: '{"message":$context.error.messageString,"statusCode":403}'
  INVALID_API_KEY:
    statusCode: 403
    responseTemplates:
      application/json: '{"message":$context.error.messageString,"statusCode":403}'
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates:
      application/json: |+
        { "statusCode": 400, "body": { "message":$context.error.validationErrorString, "response": {} } }



  BAD_REQUEST_PARAMETERS:
    statusCode: 400
    responseTemplates:
      application/json: |-
        {
            "statusCode": 400,
            "body": {
        "message":$context.error.validationErrorString,
                "response": {}
            }
        }
  UNAUTHORIZED:
    statusCode: 401
    responseTemplates:
      application/json: '{"message":$context.error.messageString,"statusCode":401}'
  ACCESS_DENIED:
    statusCode: 403
    responseTemplates:
      application/json: '{"message":$context.error.messageString,"statusCode":403}'
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false
